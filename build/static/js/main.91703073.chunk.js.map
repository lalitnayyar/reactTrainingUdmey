{"version":3,"sources":["Person/Person.js","App.js","registerServiceWorker.js","index.js"],"names":["StyledDiv","styled","div","person","props","onClick","click","name","age","children","type","onChange","changed","value","StyledButton","button","alt","App","state","persons","id","otherState","showPersons","nameChangedHandler","event","personIndex","findIndex","p","target","setState","deletePersonHandler","splice","togglePersonsHandler","doesShow","this","map","index","Person","classes","length","push","className","join","toString","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.91703073.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\n\nconst StyledDiv = styled.div`\n  width: 60%;\n  margin: 16px auto;\n  border: 1px solid #eee;\n  box-shadow: 0 2px 3px #ccc;\n  padding: 16px;\n  text-align: center;\n\n  @media (min-width: 500px) {\n    width: 450px;\n  }\n`;\n\nconst person = props => {\n  return (\n    // <div className=\"Person\" style={style}>\n    <StyledDiv>\n      <p onClick={props.click}>\n        I'm {props.name} and I am {props.age} years old!\n      </p>\n      <p>{props.children}</p>\n      <input type=\"text\" onChange={props.changed} value={props.name} />\n    </StyledDiv>\n  );\n};\n\nexport default person;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport './App.css';\nimport Person from './Person/Person';\n\nconst StyledButton = styled.button`\n  background-color: ${props => props.alt ? 'red' : 'green'};\n  color: white;\n  font: inherit;\n  border: 1px solid blue;\n  padding: 8px;\n  cursor: pointer;\n  \n  &:hover {\n    background-color: ${props => props.alt  ? 'salmon' : 'lightgreen'};\n    color: black;\n  }\n`;\n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: 'asfa1', name: 'Max', age: 28 },\n      { id: 'vasdf1', name: 'Manu', age: 29 },\n      { id: 'asdf11', name: 'Stephanie', age: 26 }\n    ],\n    otherState: 'some other value',\n    showPersons: false\n  };\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n\n    // const person = Object.assign({}, this.state.persons[personIndex]);\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n\n    this.setState({ persons: persons });\n  };\n\n  deletePersonHandler = personIndex => {\n    // const persons = this.state.persons.slice();\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({ persons: persons });\n  };\n\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({ showPersons: !doesShow });\n  };\n\n  render() {\n    const style = {\n      backgroundColor: 'green',\n      color: 'white',\n      font: 'inherit',\n      border: '1px solid blue',\n      padding: '8px',\n      cursor: 'pointer',\n      ':hover': {\n        backgroundColor: 'lightgreen',\n        color: 'black'\n      }\n    };\n\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = (\n        <div>\n          {this.state.persons.map((person, index) => {\n            return (\n              <Person\n                click={() => this.deletePersonHandler(index)}\n                name={person.name}\n                age={person.age}\n                key={person.id}\n                changed={event => this.nameChangedHandler(event, person.id)}\n              />\n            );\n          })}\n        </div>\n      );\n\n      // style.backgroundColor = 'red';\n      // style[':hover'] = {\n      //   backgroundColor: 'salmon',\n      //   color: 'black'\n      // };\n    }\n\n    const classes = [];\n    if (this.state.persons.length <= 2) {\n      classes.push('red'); // classes = ['red']\n    }\n    if (this.state.persons.length <= 1) {\n      classes.push('bold'); // classes = ['red', 'bold']\n    }\n\n    return (\n      <div className=\"App\">\n        \n        <h1>Hi, I'm a React App</h1>\n        <p className={classes.join(' ')}>This is really working!</p>\n        <StyledButton alt={this.state.showPersons } onClick={this.togglePersonsHandler}>\n          Toggle Persons  State = {this.state.showPersons.toString()}\n        </StyledButton>\n        {persons}\n      </div>\n    );\n    // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?'));\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}